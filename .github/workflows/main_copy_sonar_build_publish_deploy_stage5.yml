name: Stage 5 Hprofile Actions Code Build Docker image and Publish to ECR and Deploy to ECS Stage5
#on: workflow_dispatch
# this means it will only run when Run in github actions. Later we will use push as a trigger
on: [push, workflow_dispatch]
# this will start the workflow either with a git push to the remote repo or run manually in github actions
# test8


env:
  AWS_REGION: us-east-1
  # this is my AWS region. It can be stored in the github actions secrets

  # the following block of env vars are used by the JOB_3 below to deploy the new task def (new build of the code) and 
  # thus deploy to ECS. The ECS service will detect the change
  ECR_REPOSITORY: github-actions-ecr-project12
  #ECS_SERVICE: github-actions-ecs-service-vprofile-project12-1
  ECS_SERVICE: github-actions-ecs-service-vprofile-project12-2
  ECS_CLUSTER: github-actions-ecs-vprofile-project12
  ECS_TASK_DEFINITION: aws-files/taskdeffile.json
  CONTAINER_NAME: vprofile-project12

jobs:

  JOB_1_TESTING_SONARQUBE:
  # this is the job name
    #specify the runner to run the job. Ubuntu has a lot of stuff prebuilt. It will run a container
    runs-on: ubuntu-latest
    # ubuntu-latest runner by default does not have sonar scanner so this has to be installed.

    steps:
      - name: Code checkout
      # by default github actions does not automatically clone the source code to the runner. This has to be explicitly done.
        uses: actions/checkout@v4
        # this is found at github.com/marketplace under Actions and then Checkout
        # This will clone whatever is the source code where this is being executed to the github runner

      - name: Maven test
        run: mvn test
      
      - name: Checkstyle analysis
        run: mvn checkstyle:checkstyle

      ## Sonarcloud configuration: sonarcube is not on the runner by default
      ## we can use github actions in marketplace for sonarcube scanners
      ## First need to install jdk.  Try jdk 11 first but I think this has been deprecated for sonarcube
      ## https://github.com/marketplace/actions/setup-java-jdk
      # Setup java 11 to be default (sonar-scanner requirement as of 5.x)

      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin' 
         # See 'Supported distributions' for available options: Oracle, corretto(AWS), temurin (eclipse)
         java-version: '11'

      ## i think sonarcube scanner requires jdk 17 at minimum. Also setup-java is now @v4, but use v3 per examples
      ## https://github.com/marketplace/actions/sonar-scanner

      # - name: Set Java 17
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'temurin'
      #     java-version: '17'

      ## another variant is java 21

      # - name: Set Java 21
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: 'temurin' # See 'Supported distributions' for available options
      #     java-version: '21'

          
      # Setup sonar-scanner
      # https://github.com/marketplace/actions/sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7
        # this setups up the sonar-scanner cli tool in the runner

      # Run sonar-scanner from CLI on the runner
      # All these github secrets have been entered into github under this repo
      # /src is in our source code and where the java source code resides
      - name: SonarQube Scan
        run: sonar-scanner
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src/
            -Dsonar.junit.reportsPath=target/surefire-reports/ 
            -Dsonar.jacoco.reportsPath=target/jacoco.exec 
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

      # Check the Quality Gate status.
      # https://github.com/marketplace/actions/sonarqube-quality-gate-check
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        # id is simply if need to refer to this in another job
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL    


  JOB_2_BUILD_AND_PUBLISH:
  # this is the job name
    # "needs" makes sure that this job only runs after the first job above runs and is successful
    needs: JOB_1_TESTING_SONARQUBE
    #specify the runner to run the job. Ubuntu has a lot of stuff prebuilt. It will run a container
    runs-on: ubuntu-latest
    
    steps:
      - name: Code checkout
      # by default github actions does not automatically clone the source code to the runner. This has to be explicitly done.
        uses: actions/checkout@v4
        # this is found at github.com/marketplace under Actions and then Checkout
        # This will clone whatever is the source code where this is being executed to the github runner

      - name: Update application.properties file
      # this will replace the RDS username, password and RDS endpoint with the actual deployment values of the RDS server
      # in the source code so that when Dockerfile builds the docker image it will be built with the correct backend connection properties
      # to the current RDS server. The secrets.* values are in the github actions secrets for the repository for this project dmastrop/hprofile
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

      - name: Build & Upload image to ECR
      # this github action will upload a docker image onto ECR. It also build the docker image from source prior to the upload to ECR
      # https://github.com/marketplace/actions/docker-ecr
      # the secrets.* have been defined in the github actions secrets for this dmastrop/hprofile project repo
      # ACCESS_KEY_ID and SECRET_ACCESS_KEY is IAM user to get access to the ECR. REGISTRY is the URL of the ECR
        
        uses: appleboy/docker-ecr-action@master
        with:
         access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
         secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         registry: ${{ secrets.REGISTRY }}
         #repo: actapp
         repo: github-actions-ecr-project12
         # this is my ECR name
         region: ${{ env.AWS_REGION }}
         # region is ENV not secret
         tags: latest,${{ github.run_number }}
         # 2 tags the latest and the build number id from github
         daemon_off: false
         dockerfile: ./Dockerfile
         context: ./
         # this is where the Dockerfile is located. It is in the root level.
  

  JOB_3_DEPLOY_via_JSON_ECS_TASK_DEF:
  # this is the job name
    # "needs" makes sure that this job only runs after the first job above runs and is successful
    needs: JOB_2_BUILD_AND_PUBLISH
    #specify the runner to run the job. Ubuntu has a lot of stuff prebuilt. It will run a container
    runs-on: ubuntu-latest
    
    steps:
      - name: Code checkout
      # by default github actions does not automatically clone the source code to the runner. This has to be explicitly done.
        uses: actions/checkout@v4
        # this is found at github.com/marketplace under Actions and then Checkout
        # This will clone whatever is the source code where this is being executed to the github runner

      - name: Configure AWS Credentials
      # https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition file
      # update the task definition with the new tag from JOB_2 above
      # https://github.com/marketplace/actions/amazon-ecs-render-task-definition-action-for-github-actions
      # ECS_TASK_DEFINITION: aws-files/taskdeffile.json
      # CONTAINER_NAME: vprofile-project12
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}
          # if this were all one job can use this syntax steps.build-image.outputs.image

      - name: Deploy Amazon ECS task definition file into the service in the ECS cluster
      # https://github.com/marketplace/actions/amazon-ecs-deploy-task-definition-action-for-github-actions

      # Use env variables to target the correct ECR repo, ECS service, Cluster, task definition and container name
      # All of these will refer to the names used in the AWS ECS cluster configuration
      # see env at the top of this file
      # ECR_REPOSITORY: github-actions-ecr-project12
      # ECS_SERVICE: github-actions-ecs-service-vprofile-project12-1
      # ECS_CLUSTER: github-actions-ecs-vprofile-project12
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          # this gets the outputs from the previous step, task-def, with latest build, to deploy the ECS cluster
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          # wait until ECS service stable (ALB, container), then only marked as stable, and job will be complete
          wait-for-service-stability: true
